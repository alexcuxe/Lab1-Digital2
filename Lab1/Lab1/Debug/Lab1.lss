
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000368  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a47  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077f  00000000  00000000  00000efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000580  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000496  00000000  00000000  0000214a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_3>
  10:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_4>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	68 00       	.word	0x0068	; ????
  6a:	6b 00       	.word	0x006b	; ????
  6c:	6e 00       	.word	0x006e	; ????
  6e:	71 00       	.word	0x0071	; ????
  70:	74 00       	.word	0x0074	; ????
  72:	77 00       	.word	0x0077	; ????
  74:	7a 00       	.word	0x007a	; ????
  76:	7d 00       	.word	0x007d	; ????
  78:	80 00       	.word	0x0080	; ????
  7a:	83 00       	.word	0x0083	; ????
  7c:	86 00       	.word	0x0086	; ????
  7e:	89 00       	.word	0x0089	; ????
  80:	8c 00       	.word	0x008c	; ????
  82:	8f 00       	.word	0x008f	; ????
  84:	92 00       	.word	0x0092	; ????
  86:	95 00       	.word	0x0095	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_clear_bss>:
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	a6 30       	cpi	r26, 0x06	; 6
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  a8:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <initDislayPorts>:


//Puertos para display
void initDislayPorts(void){
	//Set pins
	DDRD = 0xFF;	//entire PORTD as output
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;		//turn off the entire port
  b4:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;		//rx and tx as normal pins
  b6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	PORTD = 0;
  ba:	1b b8       	out	0x0b, r1	; 11
  bc:	08 95       	ret

000000be <display>:

// Mostrar número
void display(uint8_t dig){
	uint8_t displayN[16] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};
	
	switch (dig)
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	80 31       	cpi	r24, 0x10	; 16
  c2:	91 05       	cpc	r25, r1
  c4:	a0 f5       	brcc	.+104    	; 0x12e <display+0x70>
  c6:	fc 01       	movw	r30, r24
  c8:	ec 5c       	subi	r30, 0xCC	; 204
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	0c 94 ac 01 	jmp	0x358	; 0x358 <__tablejump2__>
	{
	case 0:
	PORTD = displayN[0];
  d0:	8f e3       	ldi	r24, 0x3F	; 63
  d2:	8b b9       	out	0x0b, r24	; 11
	break;
  d4:	08 95       	ret
		
	case 1:
	PORTD = displayN[1];
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	8b b9       	out	0x0b, r24	; 11
	break;
  da:	08 95       	ret
		
	case 2:
	PORTD = displayN[2];
  dc:	8b e5       	ldi	r24, 0x5B	; 91
  de:	8b b9       	out	0x0b, r24	; 11
	break;
  e0:	08 95       	ret
	
	case 3:
	PORTD = displayN[3];
  e2:	8f e4       	ldi	r24, 0x4F	; 79
  e4:	8b b9       	out	0x0b, r24	; 11
	break;
  e6:	08 95       	ret
	
	case 4:
	PORTD = displayN[4];
  e8:	86 e6       	ldi	r24, 0x66	; 102
  ea:	8b b9       	out	0x0b, r24	; 11
	break;
  ec:	08 95       	ret
	
	case 5:
	PORTD = displayN[5];
  ee:	8d e6       	ldi	r24, 0x6D	; 109
  f0:	8b b9       	out	0x0b, r24	; 11
	break;
  f2:	08 95       	ret
	
	case 6:
	PORTD = displayN[6];
  f4:	8d e7       	ldi	r24, 0x7D	; 125
  f6:	8b b9       	out	0x0b, r24	; 11
	break;
  f8:	08 95       	ret
	
	case 7:
	PORTD = displayN[7];
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	8b b9       	out	0x0b, r24	; 11
	break;
  fe:	08 95       	ret
	
	case 8:
	PORTD = displayN[8];
 100:	8f e7       	ldi	r24, 0x7F	; 127
 102:	8b b9       	out	0x0b, r24	; 11
	break;
 104:	08 95       	ret
	
	case 9:
	PORTD = displayN[9];
 106:	8f e6       	ldi	r24, 0x6F	; 111
 108:	8b b9       	out	0x0b, r24	; 11
	break;
 10a:	08 95       	ret
	
	case 10:
	PORTD = displayN[10];
 10c:	87 e7       	ldi	r24, 0x77	; 119
 10e:	8b b9       	out	0x0b, r24	; 11
	break;
 110:	08 95       	ret
	
	case 11:
	PORTD = displayN[11];
 112:	8c e7       	ldi	r24, 0x7C	; 124
 114:	8b b9       	out	0x0b, r24	; 11
	break;
 116:	08 95       	ret
	
	case 12:
	PORTD = displayN[12];
 118:	89 e3       	ldi	r24, 0x39	; 57
 11a:	8b b9       	out	0x0b, r24	; 11
	break;
 11c:	08 95       	ret
	
	case 13:
	PORTD = displayN[13];
 11e:	8e e5       	ldi	r24, 0x5E	; 94
 120:	8b b9       	out	0x0b, r24	; 11
	break;
 122:	08 95       	ret
	
	case 14:
	PORTD = displayN[14];
 124:	89 e7       	ldi	r24, 0x79	; 121
 126:	8b b9       	out	0x0b, r24	; 11
	break;
 128:	08 95       	ret
	
	case 15:
	PORTD = displayN[15];
 12a:	81 e7       	ldi	r24, 0x71	; 113
 12c:	8b b9       	out	0x0b, r24	; 11
 12e:	08 95       	ret

00000130 <initPCINT0>:
//************************************************************
//                 Interruptions
//************************************************************

void initPCINT0(void){
	PCICR |= (1 << PCIE0);						//pin change
 130:	e8 e6       	ldi	r30, 0x68	; 104
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	81 60       	ori	r24, 0x01	; 1
 138:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT4);	//mask
 13a:	eb e6       	ldi	r30, 0x6B	; 107
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 61       	ori	r24, 0x10	; 16
 142:	80 83       	st	Z, r24
 144:	08 95       	ret

00000146 <initPCINT1>:
}

void initPCINT1(void){
	PCICR |= (1 << PCIE1);	
 146:	e8 e6       	ldi	r30, 0x68	; 104
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT13);
 150:	ec e6       	ldi	r30, 0x6C	; 108
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 63       	ori	r24, 0x30	; 48
 158:	80 83       	st	Z, r24
 15a:	08 95       	ret

0000015c <main>:
void initPCINT0(void);
void initPCINT1(void);

int main(void)
{
	cli();
 15c:	f8 94       	cli
	initDislayPorts();
 15e:	0e 94 58 00 	call	0xb0	; 0xb0 <initDislayPorts>
	
	PORTB |= (1 << PINB4);		//pins of PORTB as input w pull up
 162:	85 b1       	in	r24, 0x05	; 5
 164:	80 61       	ori	r24, 0x10	; 16
 166:	85 b9       	out	0x05, r24	; 5
	DDRB = 0x0F;		//inputs and ouputs
 168:	9f e0       	ldi	r25, 0x0F	; 15
 16a:	94 b9       	out	0x04, r25	; 4
	
	PORTC |= (1 << PINC4) | (1 << PINC5);
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	80 63       	ori	r24, 0x30	; 48
 170:	88 b9       	out	0x08, r24	; 8
	DDRC = 0x0F;			//inputs and outputs
 172:	97 b9       	out	0x07, r25	; 7
	
	initPCINT0();
 174:	0e 94 98 00 	call	0x130	; 0x130 <initPCINT0>
	initPCINT1();
 178:	0e 94 a3 00 	call	0x146	; 0x146 <initPCINT1>
	sei();
 17c:	78 94       	sei
	
    while (1) 
    {
		if(start == 1){
 17e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <start>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x22>
			display(5);
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	0e 94 5f 00 	call	0xbe	; 0xbe <display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	83 ed       	ldi	r24, 0xD3	; 211
 190:	90 e3       	ldi	r25, 0x30	; 48
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x36>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x40>
 19c:	00 00       	nop
			_delay_ms(1000);
			display(4);
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	0e 94 5f 00 	call	0xbe	; 0xbe <display>
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	83 ed       	ldi	r24, 0xD3	; 211
 1a8:	90 e3       	ldi	r25, 0x30	; 48
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x4e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x58>
 1b4:	00 00       	nop
			_delay_ms(1000);
			display(3);
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	0e 94 5f 00 	call	0xbe	; 0xbe <display>
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	83 ed       	ldi	r24, 0xD3	; 211
 1c0:	90 e3       	ldi	r25, 0x30	; 48
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x66>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x70>
 1cc:	00 00       	nop
			_delay_ms(1000);
			display(2);
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 5f 00 	call	0xbe	; 0xbe <display>
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	83 ed       	ldi	r24, 0xD3	; 211
 1d8:	90 e3       	ldi	r25, 0x30	; 48
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x7e>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x88>
 1e4:	00 00       	nop
			_delay_ms(1000);
			display(1);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 5f 00 	call	0xbe	; 0xbe <display>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	83 ed       	ldi	r24, 0xD3	; 211
 1f0:	90 e3       	ldi	r25, 0x30	; 48
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x96>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0xa0>
 1fc:	00 00       	nop
			_delay_ms(1000);
			display(0);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 5f 00 	call	0xbe	; 0xbe <display>
			start = 2;
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <start>
 20a:	b9 cf       	rjmp	.-142    	; 0x17e <main+0x22>

0000020c <__vector_3>:
void initPCINT1(void){
	PCICR |= (1 << PCIE1);	
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT13);
}

ISR (PCINT0_vect){
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	if (!(PINB & (1 << PINB4))) {
 22e:	1c 99       	sbic	0x03, 4	; 3
 230:	2a c0       	rjmp	.+84     	; 0x286 <__vector_3+0x7a>
		if(block == 0){
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 236:	81 11       	cpse	r24, r1
 238:	26 c0       	rjmp	.+76     	; 0x286 <__vector_3+0x7a>
			if(start == 2){
 23a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <start>
 23e:	82 30       	cpi	r24, 0x02	; 2
 240:	11 f5       	brne	.+68     	; 0x286 <__vector_3+0x7a>
				PORTC &= 0xF0;
 242:	88 b1       	in	r24, 0x08	; 8
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	88 b9       	out	0x08, r24	; 8
				counter1++;
 248:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <counter1>
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	82 0f       	add	r24, r18
 250:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter1>
				if(counter1 >= 4){
					shift1 = 4;
				}
				shift1 = counter1 - 1;
 254:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <shift1>
				PORTC |= (1 << shift1);
 258:	38 b1       	in	r19, 0x08	; 8
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <__vector_3+0x58>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	2a 95       	dec	r18
 266:	e2 f7       	brpl	.-8      	; 0x260 <__vector_3+0x54>
 268:	83 2b       	or	r24, r19
 26a:	88 b9       	out	0x08, r24	; 8
				if (PORTC & (1 << PINC3)){
 26c:	43 9b       	sbis	0x08, 3	; 8
 26e:	0b c0       	rjmp	.+22     	; 0x286 <__vector_3+0x7a>
					block = 1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					display(1);
 276:	0e 94 5f 00 	call	0xbe	; 0xbe <display>
					PORTC |= 0x0F;
 27a:	88 b1       	in	r24, 0x08	; 8
 27c:	8f 60       	ori	r24, 0x0F	; 15
 27e:	88 b9       	out	0x08, r24	; 8
					PORTB &= 0xF0;
 280:	85 b1       	in	r24, 0x05	; 5
 282:	80 7f       	andi	r24, 0xF0	; 240
 284:	85 b9       	out	0x05, r24	; 5
				}
			}
		}
	}
}
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	7f 91       	pop	r23
 294:	6f 91       	pop	r22
 296:	5f 91       	pop	r21
 298:	4f 91       	pop	r20
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_4>:

ISR(PCINT1_vect){
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	if (!(PINC & (1 << PINC4))){
 2ca:	34 99       	sbic	0x06, 4	; 6
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <__vector_4+0x34>
		if(start == 0){
 2ce:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <start>
 2d2:	81 11       	cpse	r24, r1
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <__vector_4+0x34>
			start = 1;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <start>
		}else{
			start = start;
		}
	}
	
	if (!(PINC & (1 << PINC5))){
 2dc:	35 99       	sbic	0x06, 5	; 6
 2de:	2b c0       	rjmp	.+86     	; 0x336 <__vector_4+0x8e>
		if (block == 0){
 2e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e4:	81 11       	cpse	r24, r1
 2e6:	27 c0       	rjmp	.+78     	; 0x336 <__vector_4+0x8e>
			if(start == 2){
 2e8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <start>
 2ec:	82 30       	cpi	r24, 0x02	; 2
 2ee:	19 f5       	brne	.+70     	; 0x336 <__vector_4+0x8e>
				PORTB &= 0xF0;
 2f0:	85 b1       	in	r24, 0x05	; 5
 2f2:	80 7f       	andi	r24, 0xF0	; 240
 2f4:	85 b9       	out	0x05, r24	; 5
				counter2++;
 2f6:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <counter2>
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	82 0f       	add	r24, r18
 2fe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <counter2>
				if(counter2 >= 4){
					shift2 = 4;
				}
				shift2 = counter2 - 1;
 302:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <shift2>
				PORTB |= (1 << shift2);
 306:	35 b1       	in	r19, 0x05	; 5
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <__vector_4+0x6a>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	2a 95       	dec	r18
 314:	e2 f7       	brpl	.-8      	; 0x30e <__vector_4+0x66>
 316:	83 2b       	or	r24, r19
 318:	85 b9       	out	0x05, r24	; 5
				if (PORTB & (1 << PINB3)){
 31a:	2b 9b       	sbis	0x05, 3	; 5
 31c:	0c c0       	rjmp	.+24     	; 0x336 <__vector_4+0x8e>
					block = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					display(2);
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	0e 94 5f 00 	call	0xbe	; 0xbe <display>
					PORTB |= 0x0F;
 32a:	85 b1       	in	r24, 0x05	; 5
 32c:	8f 60       	ori	r24, 0x0F	; 15
 32e:	85 b9       	out	0x05, r24	; 5
					PORTC &= 0xF0;
 330:	88 b1       	in	r24, 0x08	; 8
 332:	80 7f       	andi	r24, 0xF0	; 240
 334:	88 b9       	out	0x08, r24	; 8
				}
			}
		}
	}
}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	7f 91       	pop	r23
 344:	6f 91       	pop	r22
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <__tablejump2__>:
 358:	ee 0f       	add	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	05 90       	lpm	r0, Z+
 35e:	f4 91       	lpm	r31, Z
 360:	e0 2d       	mov	r30, r0
 362:	09 94       	ijmp

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
